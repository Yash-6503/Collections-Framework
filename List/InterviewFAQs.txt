Interview Questions
=====================

Q1. What is Collection Interface?
=>
-Collection interface is sub interface of Iterable interface available in java.util package
from JDK 1.2v.
-Collection interface is the root interface of Collections Framework.
-It reperesents a group of objects known as elements.
-Also it is the super interface of List, Set and Queue interfaces.

--------------------------------------------------------------------------------------------

Q2. In How many ways we can fetch data from collection?
=>
There are total 9 ways we can fetch data from collection they are as follows:
1. Ordinary for loop [from 1.0v]
2. for each loop    [from 1.5v]
3. for each method  [from 1.8v]
4. Enumeration  [from 1.0v]
5. Iterator     [from 1.2v]
6. SpliIterator [from 1.8v]
7. toString     [from 1.0v]
8. Method Reference [from 1.8v]
9. ListIterator     [from 1.2v]

---------------------------------------------------------------------------------------

Q3. What is List Interface?
=>
-List interface is the sub interface of Collection inteface available in java.util package
from JDK 1.2v.
-Internally List interface follows array concept so it stores elements based on index basis.
-It accepts Duplicate elements.
-It also accepts null, hetrogenous and homogenious values.
-We can directly perform sorting operation on List using Collections.sort(List l).
-List interfaces are having implementing classes they are ArrayList, LinkedList, Vector and Stack.

--------------------------------------------------------------------------------------------------

Q4. What is Enumeration Interface?
=>
-Enumeration interface is a predefined interface available from JDK 1.0v
-It is also konow as legacy interface.
-It used to fetch or retrieve Collection elements one by one because it is a cursor.
-we can also create an object of Enumeration inteface using elements() Method.
public Enumeration elements()
-It has 2 methods to perform retrieve operations.
1. public boolean hasMoreElements() -> It will return true if more elements are there in collection.
2. public Object nextElement() -> It will return a object and move cursor to next line.

-------------------------------------------------------------------------------------------------------

Q5. What is Iterator Interface?
=>
-Iterator interface is a predefined interface available in java.util package from JDK 1.2v
-It is used to fetch / retrieve elements from Collection in forward direction only because it has cursor.
-public Itertaor iterator();
-It has 2 methods to perfoem retrieve operations
1. public boolean hasNext() -> It will verify element is available in next position if yes then return true.
2. public Object next() -> it will return object and move cursor to next line.

---------------------------------------------------------------------------------------------------------

Q6. What is ListIterator Interface?
=>
-ListIterator interface is a predefined interface available in java.util package from JDK 1.2v.
-It is the sub interface of Iterator interface.
-It is used to retrieve / fetch Collection objects in both forward and backward directions.
-public ListIterator listIterator();
-It has 4 methods to perform retrieve operations.
1. public boolean hasNext();
->It will verify object is available in next position if yes then return true.
2. public boolean hasPrevious();
->It will verify object is available in previous position if yes then retrun true.
3. public Object next();
->It will return object and move the cursor forward to next object.
4. public Object previous();
->It will return object and move cursor to backward to previous object.

-------------------------------------------------------------------------------------------------------------

Q7. What is SplIterator Interface?
=>
-SplIterator Iterator is a predefined inteface available in java.util package from JDK 1.8v.
-It is used to retrieve elements from Collection [array, Collection, stream].
-To retrieve elements it uses  forEachRemaininig(Consumer<T> cons) method.
- forEachRemaininig(Consumer<T> cons) method is the combination of hasNext() and next() methods.

-----------------------------------------------------------------------------------------------------------------

Q8. What is Vector?
=>
-class signature of Vector is as follows:
public class Vector<E> extends AbstractList<E> implements List<E>, Serializable, Clonable, RandomAccess
-Vector is a implementer class of List interface available in java.util package from JDK 1.0v.
-It is aslo known as legacy(old) class.
-It accepts duplicates, null, hetrogenous and homogenious elements.
-It stores elements on index basis.
-It is dynamically growable with initial capacity 10.
-When initial capacity reaches its limit then new capacity will be double than initial capacity
formula: new_capacity = initial_capacity * 2
-Here Iterator is fail fast iterator.
-Difference between ArrayList and Vector is ArrayList methods are not synchronized so muliple threads 
can access methods but on the other hand somr vector methods are synchronized so vector is slow in nature.
-Vector is implementing List, Serializable, Clonable and RandomAccess interfaces.
-Vector and HashTable both are only legacy classes others came in JDK 1.2v

-----------------------------------------------------------------------------------------------------------------

Q9. How many Constructors are there in Vector?
=>
There are total 4 Constructors available in Vector they are as follows:
1. Vector v = new Vector();
It will create vector object with default initialcapacity of 10.
2. Vector v = new Vector(int initialCapacity);
It will create vector object with user specified capacity.
3. Vector v = new Vector(int initialCapacity, int capacityIncrement);
It will create vector object with user specified initialCapacity and when capacity will full then it will
increment by capacityIncrement given. ex.5 then 5, 10, 15, 20, etc.
4. Vector v = new Vector(Collection c);
To achieve loose coupling.

----------------------------------------------------------------------------------------------------------------

Q10. What is Stack?
=>
-Stack is a predefined class available in java.util package.
-It is the sub class of Vector class available from JDK 1.0v also known as legacy(old) class.
-It is a linear data structure used to store objects in LIFO(Last In First Out) order.
-Inserting object in stack is push operation where as extracting object from stack is pop operation.
-It throws java.util.EmtyStackException when we try to print empty stack.
-It has only one Constructor i.e Stack s = new Stack() it will create empty stack.

----------------------------------------------------------------------------------------------------------------

Q11. Methods of Stack?
=>
There are 5 methods in stack class to perform operations.
1. public E push(Object o){}
-It will push the object into stack.
2. public E pop(){}
-It will retrieve object from top of stack.
3. public E peek(){}
-It will return topmost object from stack.
4. public boolean isEmpty(){}
-It will return true if stack is empty otherwise false.
5. public int search(Object o){}
-it will return offset position if object is present otherwise it will return -1;

---------------------------------------------------------------------------------------------------------------

Q12. What is ArrayList?
=>
-class signature of ArrayList is as follows:
public class ArrayList<E> extends AbstractList<E> implements List<E>, Serializable, Clonable, RandomAccess{}
-ArrayList is a predefined class available in java.util package under List interface from JDK 1.2v.
-It is a dynamically growable array.
-It accepts duplicates, null, hetrogenous and homogenious elements.
-It stores elements on index basis because it is a dynamic array.
-It grows dynamically when its derafult capacity is full i.e 10. then it will calculate new capacity as follows:
new_capacity = (initial_capacity * 3)/2 + 1  i.e Almost 50% of increment.
-All methods of ArrayList are not synchronized so multiple threads can access methods and performance is good.
-ArrayList is useful for reterival operations when duplicates are allowed and Thread safety not required.
-Here Iterator is fail fast Iterator.
-ArrayList implementes List, Serializable, Clonable and RandomAccess interfaces.

------------------------------------------------------------------------------------------------------------------

Q13. How many Constructors are there in ArrayList?
=>
There are total 3 Constructors in ArrayList as follows:
1. ArrayList list = new ArrayList();
-It will create ArrayList object with default capacity of 10.
2. ArrayList list = new ArrayList(int initialCapacity);
-It will create ArrayList object with user specified capacity.
3. ArrayList list = new ArrayList(Collection c);
-we can copy any Collection data into this object.

----------------------------------------------------------------------------------------------------------------